Exercice 5:

Question 1:

gcc hello.c -g -o hello

Question 2:

$ valgrind ./hello
==5207== Memcheck, a memory error detector
==5207== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==5207== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==5207== Command: ./hello
==5207== 
Hello You !
==5207== 
==5207== HEAP SUMMARY:
==5207==     in use at exit: 0 bytes in 0 blocks
==5207==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==5207== 
==5207== All heap blocks were freed -- no leaks are possible
==5207== 
==5207== For counts of detected and suppressed errors, rerun with: -v
==5207== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Il n'y pas de problemes/fuites de mémoire

Question 3:

==5212== HEAP SUMMARY:
==5212==     in use at exit: 0 bytes in 0 blocks
==5212==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated

Le programme n'alloue pas de mémoire (malloc) et ne demande pas de libération (free)

Question 4:

$ valgrind ./mem
==5279== Memcheck, a memory error detector
==5279== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==5279== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==5279== Command: ./mem
==5279== 
==5279== Invalid write of size 4
==5279==    at 0x4004FD: main (mem.c:6)
==5279==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==5279== 
==5279== 
==5279== Process terminating with default action of signal 11 (SIGSEGV)
==5279==  Access not within mapped region at address 0x0
==5279==    at 0x4004FD: main (mem.c:6)
==5279==  If you believe this happened as a result of a stack
==5279==  overflow in your program's main thread (unlikely but
==5279==  possible), you can try to increase the size of the
==5279==  main thread stack using the --main-stacksize= flag.
==5279==  The main thread stack size used in this run was 8388608.
==5279== 
==5279== HEAP SUMMARY:
==5279==     in use at exit: 0 bytes in 0 blocks
==5279==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==5279== 
==5279== All heap blocks were freed -- no leaks are possible
==5279== 
==5279== For counts of detected and suppressed errors, rerun with: -v
==5279== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Erreur de segmentation

Question 5:

==5279==  Access not within mapped region at address 0x0
==5279==    at 0x4004FD: main (mem.c:6)

L'erreur se trouve à la ligne 6
valgrind nous dit quand il nous manque un free, un malloc ou qu'on accede dans un endroit de la memoire interdit

Question 6:

==7040== Invalid write of size 4
==7040==    at 0x400625: main (mem2.c:12)
==7040==  Address 0x0 is not stack'd, malloc'd or (recently) free'd

Il manque malloc avec l'instruction "p=(int *)malloc(sizeof(int)*size);"

Question 7:

==7092== Invalid read of size 4
==7092==    at 0x4006C1: main (mem2.c:18)
==7092==  Address 0x51fc040 is 0 bytes inside a block of size 20 free'd
==7092==    at 0x4C2BDEC: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==7092==    by 0x4006A3: main (mem2.c:14)

On libère la mémoire alors qu'on en a encore besoin. On doit mettre le free après.

Question 8:

==7904== HEAP SUMMARY:
==7904==     in use at exit: 40 bytes in 1 blocks
==7904==   total heap usage: 6 allocs, 5 frees, 140 bytes allocated
==7904== 
==7904== LEAK SUMMARY:
==7904==    definitely lost: 40 bytes in 1 blocks
==7904==    indirectly lost: 0 bytes in 0 blocks
==7904==      possibly lost: 0 bytes in 0 blocks
==7904==    still reachable: 0 bytes in 0 blocks
==7904==         suppressed: 0 bytes in 0 blocks
==7904== Rerun with --leak-check=full to see details of leaked memory

On a une fuite de mémoire car on a oublié un free.

Question 9:

Il n'y avait pas d'après valgrind de ligne fautive, car le programme pouvait s'executer normalement (suffisament de mémoire disponible) en revanche nous avions une fuite mémoire
